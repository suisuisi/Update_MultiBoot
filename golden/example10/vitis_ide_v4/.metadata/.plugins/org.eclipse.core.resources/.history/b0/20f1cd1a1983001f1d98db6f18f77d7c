/*
 * user_app.c
 *
 *  Created on: 2021年6月3日
 *      Author: YF-FPGA2
 */
#include "main.h"

u16 uart_rev_cnt = 0;
u8	uart_rev_buff[UART_MAX_LEN]={0};
u8	uart_send_buff[15]={0};
u8	uart_update_wait=0;
u8	data_sync_save[256]={0};

u16	uart_rev_flag=0,data_fream_cnt=0,max_fream_num=0;

uart_frame_data 	*uart_rev_struct = (uart_frame_data *)uart_rev_buff;
uart_frame_data 	*uart_send_struct = (uart_frame_data *)uart_send_buff;

u32		wr_flash_err_cnt=0;

//XUartLite UartLite;		/* Instance of the UartLite Device */


//串口输出化
int	 UartLite_Init(u16 DeviceId)
{
	uart_rev_struct->va_data=&uart_rev_buff[14];
	uart_rev_struct->checknum=uart_rev_buff[UART_MAX_LEN-1];

	uart_send_struct->checknum=uart_send_buff[UART_SEND_LEN-1];

	//初始化为握手包
	uart_send_pack(SHAKE_PACK_HEADER,1,SHAKE_CHECK_NUM);

	return XST_SUCCESS;
}


//装载发送数据包
void	uart_send_pack(u32 pack,u16 cmd,u8 result)
{
	uart_send_struct->header=pack;
	uart_send_struct->data_len=0;
	uart_send_struct->package_cnt=0x01000000;		 //高低位交换;先发送高字节

	uart_send_struct->cmd=(cmd<<8) |(cmd&0xff00>>8);//高低位交换;先发送高字节
	uart_send_buff[UART_SEND_LEN-1]=result;
}

//查询uart 接收数据
void UartLite_rev_data(void)
{
	u8 StatusRegisterVal=0;

	if((uart_rev_flag&0x4000)==0){												//接收完成后不再接收数据
		StatusRegisterVal = Xil_In32(UARTLITE_BASEADDR+XUL_STATUS_REG_OFFSET);	//读FPGA状态
		 if (StatusRegisterVal & XUL_SR_RX_FIFO_VALID_DATA){
			 uart_rev_flag =0x8000;												//接收标记
//    		 Xil_Out32(UARTLITE_BASEADDR +XUL_CONTROL_REG_OFFSET,0);			//写终端寄存器,关闭中断
			 uart_rev_buff[uart_rev_cnt++] = Xil_In32(UARTLITE_BASEADDR+XUL_RX_FIFO_OFFSET);
		 }
		 else{
			 if((uart_rev_flag&0x8000)==0x8000)
				 uart_rev_flag++;
			 if((uart_rev_cnt==UART_MAX_LEN)||((uart_rev_flag&0x3fff)>5000))	//接收到最大数据长度,50ms接收超时标记
				 uart_rev_flag |=0x4000;										//接收完成
		 }
	}
}

//串口发送数据
void UartLite_send_data(u8 *psend_buf,u8 send_num)
{
	u8 StatusRegister=0,send_cnt=0;

	StatusRegister = Xil_In32(UARTLITE_BASEADDR+XUL_STATUS_REG_OFFSET);					//读FPGA状态
	while (send_cnt<send_num) {
		if((StatusRegister & XUL_SR_TX_FIFO_FULL) == 0){
			Xil_Out32(UARTLITE_BASEADDR +XUL_TX_FIFO_OFFSET,psend_buf[send_cnt]);		//写数据
			send_cnt++;
		}
		StatusRegister = Xil_In32(UARTLITE_BASEADDR+XUL_STATUS_REG_OFFSET);				//读FPGA状态
	}
}

//串口接收数据处理,按照上位机串口协议解析
void UartLite_rev_handle(u32 UPDATE_FLASH_ADDR)
{
	u8	checknum=0,rewrite_flag=0;
	u32	checknum1=0,checknum2=0;
	u16 i=0,j,rev_valid_num=0,sync_flag=0;
	u32	temp=0;
	if((uart_rev_flag&0x4000)==0x4000){ 												//接收完成后处理
		rev_valid_num = uart_rev_cnt;
		temp = ((uart_rev_struct->package_cnt&0x00ff0000)>>8) | (uart_rev_struct->package_cnt>>24);
		temp = temp | ((uart_rev_struct->package_cnt&0x0000ff00)<<8);					//高低字节交换
		temp = temp | ((uart_rev_struct->package_cnt&0x000000ff)<<24);
		uart_rev_struct->package_cnt = temp;
		temp=0;
		temp = uart_rev_struct->cmd>>8;													//单字节有效
//		temp = temp | (uart_rev_struct->cmd<<8);
		uart_rev_struct->cmd = temp;
		for(i=0;i<rev_valid_num-1;i++){//计算校验和
			checknum +=uart_rev_buff[i];
			if(i>14)
				checknum1+=uart_rev_buff[i];
		}

		if((checknum == uart_rev_buff[rev_valid_num-1])&&(uart_rev_struct->header==SHAKE_PACK_HEADER)){
			if(uart_update_wait==0)	{													//等待接收升级握手信号
				if((rev_valid_num==15)&&(uart_rev_struct->cmd==1)){
					uart_update_wait=1;
					uart_send_pack(SHAKE_PACK_HEADER,1,SHAKE_CHECK_NUM);				//装载发送缓冲区数据
					UartLite_send_data(uart_send_buff,UART_SEND_LEN);					//发送数据
				}
			}
			else if(uart_update_wait==1){
				data_fream_cnt++;
				if(data_fream_cnt==1){													//第一包数据
					max_fream_num = uart_rev_struct->package_cnt;
					sync_flag = 256;
					for(i=0;i<256;i++)
						data_sync_save[i]=uart_rev_struct->va_data[i+UART_REV_CMDLEN];
				}
				else{
					sync_flag = 0;
				}
				if(rev_valid_num>(UART_REV_CMDLEN+sync_flag)){

					temp = UPDATE_FLASH_ADDR + sync_flag + ((data_fream_cnt-1)<<10);  	//=等于*1024,flash地址偏移

					do{
						//写flash，每次写1024个数
						spi_flash_write_n(&uart_rev_struct->va_data[sync_flag+UART_REV_CMDLEN],temp,1024);

						//flash 校验
						for(i=0;i<4;i++){
							for(j = 0; j < PAGE_SIZE + READ_WRITE_EXTRA_BYTES;j++) {
									ReadBuffer[j] = 0x0;
							}
							SpiFlashRead(&Spi, temp+(i<<8), 256);
							for(j = 4; j < PAGE_SIZE + READ_WRITE_EXTRA_BYTES;j++)
								checknum2 += ReadBuffer[j];
						}

						rewrite_flag =0 ;
						if(checknum1 == checknum2){
							if(data_fream_cnt == max_fream_num)								//表示已经是最后一包数据,发送同步头数据
								spi_flash_write_n(data_sync_save,UPDATE_FLASH_ADDR,256);
							uart_send_pack(ACK_PACK_HEADER,0,0);							//装载发送缓冲区数据
							UartLite_send_data(uart_send_buff,UART_SEND_LEN);				//发送数据
						}
						else{
							rewrite_flag = rewrite_flag + 1;
						}

					}while((rewrite_flag>0)&&(rewrite_flag<3));								//写flash校验不成功,重新写3次

				}
			}

		}
		else{
			uart_send_pack(ACK_PACK_HEADER,0,1);											//装载发送缓冲区数据
			UartLite_send_data(uart_send_buff,UART_SEND_LEN);								//发送数据
		}
		uart_rev_flag = 0;
		uart_rev_cnt  = 0;
		for(i=0;i<UART_MAX_LEN;i++)
			uart_rev_buff[i]=0;
	}
}

//更新SPI flash
//注意Ymodem在最后数据帧时,不满1024字节的，会分为N帧128字节数据
void  Spi_flash_update(u8 pdata[],u32 frame_cnt,u32 minframe_cnt,u16 data_len,u32 UPDATE_FLASH_ADDR)
{
	u32 i,j;
	u32 checknum1=0,checknum2 = 0;
	u32	temp_addr=0,rewrite_flag=0;
	u16 sync_byte_num = 0;


	if(data_len > 0){			//数据有效才执行以下内容
		if(over_fream_f == 0){
			if(frame_cnt == 1){
				for(i=0;i<256;i++)	//FPGA烧写flash，需要将同步信息最后写入
					data_sync_save[i]=pdata[i];
				sync_byte_num = 256;
				wr_flash_err_cnt=0;
			}
			else
				sync_byte_num = 0;

			for(i=sync_byte_num;i<data_len;i++)									//计算校验和1
				checknum1 += pdata[i];

			//flash地址偏移=帧计数*1024+128帧计数*128
			if(minframe_cnt == 0)
				temp_addr = UPDATE_FLASH_ADDR  + ((frame_cnt-1)<<10);
			else
				temp_addr = UPDATE_FLASH_ADDR  + ((frame_cnt-1)<<10) + ((minframe_cnt-1)<<7);
			do{
				if(frame_cnt == 1){
					i=1;
				}
				else
					i=0;
				//按照4KB页擦除擦除执行
				if((temp_addr % 4096)==0){
					SpiFlashWrite_control(COMMAND_WRITE_ENABLE);
					SpiFlashSectorErase(&Spi,COMMAND_SUB_4KB_ERASE, temp_addr);
				}
				//写flash，每次写1024个数
				spi_flash_write_n(&pdata[sync_byte_num],temp_addr+sync_byte_num,data_len - sync_byte_num);
				checknum2 = 0;
				//flash 校验
				if(data_len>256){
					while(i<4){
						for(j = 0; j < PAGE_SIZE + READ_WRITE_EXTRA_BYTES;j++) {
							ReadBuffer[j] = 0x0;
						}
						SpiFlashRead(&Spi, temp_addr+(i<<8), 256);
						for(j = 4; j < PAGE_SIZE + READ_WRITE_EXTRA_BYTES;j++)		//计算校验和2
							checknum2 += ReadBuffer[j];
						i++;
					}
				}
				else{//最后的128字节帧读校验
					for(j = 0; j < PAGE_SIZE + READ_WRITE_EXTRA_BYTES;j++) {
						ReadBuffer[j] = 0x0;
					}
					SpiFlashRead(&Spi, temp_addr+sync_byte_num, data_len);
					for(j = 4; j < PAGE_SIZE + READ_WRITE_EXTRA_BYTES;j++)			//计算校验和2
						checknum2 += ReadBuffer[j];
				}
				if(checknum1 == checknum2){											//比对校验和
					rewrite_flag =0 ;
				}
				else{
					rewrite_flag = rewrite_flag + 1;
					wr_flash_err_cnt++;
				}


			}while((rewrite_flag>0)&&(rewrite_flag<3));								//写flash校验不成功,重新写3次
		}
		else {//表示已经是最后一包数据,发送同步头数据
			spi_flash_write_n(data_sync_save,UPDATE_FLASH_ADDR,256);
		}
	}

}

void  Update_Fun(u8 start_mod,u32 UPDATE_FLASH_ADDR)
{
	u32 i;

	u8	timeout_3s  =0; //,start_mod=0
	u8	*flash_data =NULL;
	u16 data_va_len =0;		//返回数据有效长度
	static int timeout_cnt = 0;

	//大约3S一次,外部固定延时函数10us,定时发送'C'字符
	timeout_cnt ++;
	if(timeout_cnt > 250000)	{
		timeout_3s = 1;
		timeout_cnt = 0;
	}
	else
		timeout_3s = 0;

	//串口数据接收
	UartLite_rev_data();

	//串口帧接收完成后处理数据
	if((uart_rev_flag&0x4000)==0x4000){

//		if(uart_rev_buff[0] == 'Y')		//启动modem传输
//			start_mod = 1;
//		else
//			start_mod = 0;

		//modem数据分析
		data_va_len = modem_data_handle(uart_rev_buff,uart_rev_cnt,uart_rev_flag,flash_data);		//NO.1
		if(over_fream_f == 1)	//结束帧时,FPGA需要将保持的同步头写入
			data_va_len = 256;
		//spi flash 更新
		Spi_flash_update(&uart_rev_buff[3],mod_fream_cnt&0x7fffffff,fream_128Byte_cnt,data_va_len);	//NO.2

		//清空UART缓冲
		uart_rev_flag = 0;
		uart_rev_cnt  = 0;
		for(i=0;i<UART_MAX_LEN;i++)
			uart_rev_buff[i]=0;
		usleep(4000);			//延时10ms回复
	}
	//modem状态切换与数据回复
	Modem_State_Conv(start_mod,timeout_3s);												//NO.3
}

